/**
 * This is the Harmonics.h implementation, it is the basis for PIMD
 * that creates an array of desired length of harmonic oscillators subject 
 * to langevin equation.   
 *
 * Joey Cendagorta 1/16/15
 */
#include "Harmonics.h"
#include "Harmonic.h"
#include "Random.h"
#include <cmath>


/**
 * This is the defualt constructor which makes ten beads. 
 */ 
Harmonics::Harmonics()
{
	p = 10;
	Populate(p);
	mass = 1.0;
}

/**
 * This is the explicit constructor which makes the desriec amount of beads. 
 */ 
 
Harmonics::Harmonics(int num)
{
	p = num;
	Populate(p);
	mass = 1.0;
}

/**
 * This populates each bead with a random mass, frequency, and friction
 * coefficient. 
 */ 

void Harmonics::Populate(int num)
{
	double o,m,f;
	for(int i=1; i<=num; i++) {
//		m = RandMass();
//		o = RandOmega();
//		f = RandFriction();
		m = 1.0;
		o = 1.0;
		f = 1.0;
//		if(i==1)
//			f=0.5;
//		else
//			f=8.0;
//		std::cout << i << " " << m << " " << o << " " << f << std::endl;
		h[i].Assignment(m,o,f);
	}
}

/**
 * This function returns a specific bead.
 */ 

Harmonic Harmonics::getHarmonic(int n)
{
	return h[n-1];
}

void Harmonics::Initialize() 
{
	double Fext;
	TransformMass();
	TransformUtoX();
	ForceTransformXtoU();
	for(int i = 0;i<p;i++) {
		Fext = tforce[i];
		h[i].ForceCalc(Fext);
	}
}
/**
 * This performs langevin dynamics for all beads. 
 */ 
void Harmonics::Run(double time, double k, double t)
{
	double Fext, force;
	double dt = time;
	double kb = k;
	double T = t;
	double R = generateRand();
	for(int i=0; i<p; i++) {
		h[i].momentum = h[i].momentum + 0.5*dt*(h[i].force);
		h[i].position = h[i].position + 0.5*dt*h[i].momentum/h[i].mass1;
		h[i].momentum = exp(-h[i].friction*dt)*h[i].momentum+sqrt(kb*T*(1.0-exp(-2.0*h[i].friction*dt)))*R*sqrt(h[i].mass2);
		h[i].position = h[i].position + 0.5*dt*h[i].momentum/h[i].mass1;
		TransformUtoX();
		ForceTransformXtoU();
		h[i].ForceCalc(Fext);
		h[i].momentum = h[i].momentum + 0.5*dt*h[i].force;
	}	
}

/**
 * This is the transformation function that transforms the staging variables
 * to the primitive variables (U-->X). It follows the recursive formula of 
 * x1 = u1; x(k) = u(k) + sum(k to p) {(k-1)/(l-1)u(l) for k = 2 to P.
 * This makes a decoupled system coupled
 */
void Harmonics::TransformUtoX()
{
	double sum, numer, denom;
	for(int k=1;k<=p;k++) {
		sum = 0.0;
		numer = k-1;
		if(k == 1) {
			tpos[0] = h[0].position;
		}
		else {
			for(int l=k;l<=p;l++) {
				denom = l - 1;
				sum = sum + numer/denom*h[l-1].position;
			}
			tpos[k-1] = tpos[0]+sum;
		}
	}
}

/**
 * This is the transformation function that transforms the primitive variables
 * to the staging variables (X-->U). It follows the recursive formula of 
 * u1 = x1; u(k) = x(k) - [(k-1)*x(k+1) + x1]/k
 * This makes a coupled system decoupled.
 */

void Harmonics::TransformXtoU()
{
	h[0].position = tpos[0];
	for(int k=p;k>=2;k--) {
		if(k == p) {
			h[k-1].position = tpos[k-1] - tpos[0]/k;
		}
		else {
			h[k-1].position = tpos[k-1] - ((k-1)*tpos[k] + tpos[0])/k;
		}
	}
}

void Harmonics::ForceTransformXtoU() 
{
	double fsum, numer, denom;
	double freq = 10.0
	for(int k=1;k<=p;k++) {
		fsum = 0.0;
		if(k == 1) {
			for(int i=1;i<=p;i++)
				fsum = fsum - h[i-1].position*mass*freq*freq;
			tforce[0] = fsum/((double) p); // Check to see if should be divided by P.
		}
		else {
			tforce[k-1] = -mass*freq*freq*(h[k-1].position + (k-2)/(k-1)*h[k-2].position);
			tforce[k-1] = tforce[k-1]/((double) p);
		}
	}
}

void Harmonics::TransformMass() 
{
	for(int k=1;k<=p;k++) {
		if(k == 1) {
			h[0].mass1 = mass;
			h[0].mass2 = 0;
		}
		else {
			h[k-1].mass1 = k/(k-1)*mass;
			h[k-1].mass2 = h[k-1].mass1;
		}
	}
}
double Harmonics::CentralPosition() 
{
	double pos = 0.0;
	for(int i=0;i<p;i++) {
		pos = pos + tpos[i];
	}
	return pos;
}

double Harmonics::CentralMomentum() 
{
	double mom = 0.0;
	for(int i=0;i<p;i++) {
		mom = mom + h[i].momentum;
	}
	return mom;
}

double Harmonics::PrimitiveEnergy()
{
	double energy;
	energy = 0.0;
	for(int i=0;i<p;i++) {
//		energy = energy + 0.5* 
	}
}

double Harmonics::VirialEnergy()
{
	double energy, extpot, harmpot;
}

Harmonics::~Harmonics()
{

}
